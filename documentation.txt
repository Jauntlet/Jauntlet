Programming Standards:
- Private variables start with an '_'
- We do not use namespace std

Shaders:
  Shaders are a complicated subject, and hard to understand under pretty much every circumstance. The shader files themselves are in a language called "GLSL"   (Open Graphics Library Shading language) and does not natively have any IDE support

  Currently within Jauntlet you can create an instance of GLSLProgram to compile a vertex and fragment shader. Simply use     GLSLProgram.compileShaders("vertexShaderFilePath", "fragmentShaderFilePath") to create those two shaders. 

  You can add attributes to each shader by also adding GLSLProgram.addAttribute("Attribute") and then link them using GLSLProgram.linkShaders();
  To access any variables you add, you can use GLSLProgram.getUniformLocation("Attribute")

  * note GLSLProgram references whatever you named the actual program when creating it.

  In the future there will be more ways to create and compile shaders but that will have to created seperately. As for actually making shaders,
  reference any in the "Shaders" folder and learn more about GLSL shader programming. 

Sprites:
  Sprites are for simple 2D textures that can be displayed at a position.
  initialized with Sprite(x, y, width, height, texturePath);

  Notice: Be careful with vectors, as they can recreate the sprite if you add more to the vector, causing the sprite buffers to be deleted, use a vector<Sprite*> instead

Obtaining a Texture:
  (handled if you are just using a sprite!)
  We use texture caching to make sure that we are efficentely allocating and reusing textures efficiently, We firstly have a global ResourceManager which stores the majority of the textures, which you can use with ResourceManager::getTexture(filePath);
  if for some reason you need to make a new seperate cache of textures, you can create a new one with the TextureCache class.

Tilesets:
  Tilesets are handy for automatically letting Jauntlet understand how tiles should be oriented and placed dynamically based on its surroundings. 
  #include<Jauntlet/TileSet.h>
  The constructor for the tilesets are very long and require filepaths for many different states. This should be visible within Visual Studio so GL!

Tilemaps:
  Tilemaps are used for placing tiles into the world on a grid-based system. They load information from a text file using single-digit characters you define. 
  #include <Jauntlet/TileMap.h>

  The constructor requires a global texture cache for storing its texture data, and you can define the size of its tiles.
  TileMap(TextureCache* textureCache, int tileSize);

  Before you can load a level from a tilemap, you must first tell the tilemap what each character means and what it leads to. You can add either an individual tile texture, or a tileset to a character. 
  TileMap.registerTile(char identifier, std::string filePath);
  TileMap.registerTileSet(char identifier, TileSet& tileSet);

  You can load a level using the following method.
  TileMap.loadTileMap(std::string filePath);

  Finally you just need to render the tilemap in your gameloop to see it in game.
  TileMap.draw();
Input Manager:
	Inputs are obviously very important to making a game work so heres a guide on how to use our input Manager:
	*Note: Input is currently detected outside of the engine, meaning if you didn't copy over the code than the input manager may not work properly. This will be changed eventually.
	
	Detect if a key is pressed or not (returns bool):
	inputManager.isKeyDown(keyValue);
	Most keys are written like "SDLK_w" for the W key.
	
	Get the coords of the players mouse (Vec2)
	inputManager.getMouseCoords();

Error Handling:
  #include <Jauntlet/Errors.h>
  Fatal errors will log the error to the console and close the game. Note the Console is only available in debug builds.
  fatalError("string");


CREATING A NEW GAME:
   **THIS SECTION IS SUBJECT TO CHANGE, THIS STUFF IS DIFFICULT**
  - create a new C++ empty project
  - copy the "Jauntlet" folder from here to the new project folder.
  - copy dependencies folder from main project TODO: MAKE THIS NOT STUPID LOL
  - in the new porjects library directories (VC++ Directories > Library Directories), add "$(SolutionDir)Debug"
  - still in the same project menu as before, add "$(SolutionDir)" to Include Directories
  - go to properties > Linker > Input > Additional Dependencies and add "Jauntlet.lib", "SDL2.lib", "SDL2main.lib", "opengl32.lib", "glew32.lib"
